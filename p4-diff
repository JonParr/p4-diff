#!/usr/bin/env python

import sys
import os
import subprocess
import argparse
import tempfile

Verbose = False
Ticket = None

def getP4Command():
    cmd = ['p4']
    if Ticket:
        cmd += ['-P',Ticket]
    return cmd

def userHasPerforce():
    p = subprocess.Popen(['which','p4'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    p.communicate()
    if p.returncode == 0:
        return True
    return False

def runCommand(cmd):
    if Verbose:
        print 'Executing: {}'.format(cmd)
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (out,err) = p.communicate()
    if len(err) > 0:
        print 'error: {}'.format(err)
        exit(1)
    return (out,err)

def convertDepotPathToLocal(depot_path):
    command = getP4Command() + ['where',depot_path]
    (out,_) = runCommand(command)
    out = out.split(' ')
    # Format is <depot> <something> <local>
    # on a single line, so just grab the third item.
    return out[2].strip()

def generateFileDiff(new,newfile):
    if new:
        command = ['diff','-u','/dev/null',newfile]
    else:
        command = ['diff','-u',newfile,'/dev/null']
    (diff,_) = runCommand(command)
    print diff
    return diff

def generateAddedFileDiffFromShelved(changelist,depot_path):
    # p4 print adds an extra newline only for symlinks, so we have to check the
    # file type and remove it in this case.
    command = getP4Command() + ['fstat','-T','headType','{}@={}'.format(depot_path,changelist)]
    (content,_) = runCommand(command)
    fileType = content.split('\n')[0].split(' ')[2]
    command = getP4Command() + ['print','-q','{}@={}'.format(depot_path,changelist)]
    (content,_) = runCommand(command)
    tmp = tempfile.NamedTemporaryFile()
    tmpfile = open(tmp.name,'w')
    if fileType == 'symlink':
        tmpfile.write(content[:-1])
    else:
        tmpfile.write(content)
    tmpfile.close()
    command = ['diff','-u','/dev/null',tmp.name]
    (diff,_) = runCommand(command)
    lines = diff.split('\n')
    # replace tmp file name with the depot one for clarity
    lines[1] = lines[1].replace(tmp.name,depot_path)
    print '\n'.join(lines)

def generateDeletedFileDiffFromShelved(changelist,depot_path,file_revision):
    # p4 print adds an extra newline only for symlinks, so we have to check the
    # file type and remove it in this case.
    command = getP4Command() + ['fstat','-T','headType','{}#{}'.format(depot_path,file_revision)]
    (content,_) = runCommand(command)
    fileType = content.split('\n')[0].split(' ')[2]
    command = getP4Command() + ['print','-q','{}#{}'.format(depot_path,file_revision)]
    (content,_) = runCommand(command)
    tmp = tempfile.NamedTemporaryFile()
    tmpfile = open(tmp.name,'w')
    if fileType == 'symlink':
        tmpfile.write(content[:-1])
    else:
        tmpfile.write(content)
    tmpfile.close()
    command = ['diff','-u',tmp.name,'/dev/null']
    (diff,_) = runCommand(command)
    lines = diff.split('\n')
    # replace tmp file name with the depot one for clarity
    lines[0] = lines[0].replace(tmp.name,depot_path)
    print '\n'.join(lines)

def generateEditFileDiff(depot_path):
    command = getP4Command() + ['diff','-du',depot_path]
    (diff,_) = runCommand(command)
    if len(diff.split('\n')) != 3:
        print diff
        return diff
    if Verbose:
        print 'Empty diff detected for {}'.format(depot_path)
    return ''

def generateEditFileDiffFromShelved(base_revision, changelist,depot_path):
    command = getP4Command() + ['diff2','-u','{}#{}'.format(depot_path,base_revision),'{}@={}'.format(depot_path,changelist)]
    (diff,_) = runCommand(command)
    if len(diff.split('\n')) != 1:
        print diff
        return diff
    if Verbose:
        print 'Empty diff detected for {}'.format(depot_path)
    return ''

def getOpenedFiles(changelist):
    opened_files = []
    command = getP4Command() + ['opened','-s','-c',changelist]
    (out,_) = runCommand(command)
    for l in out.split('\n'):
        if l == "":
            continue
        fields = l.split(' ')
        file_name = fields[0].split('#')[0]
        if len(fields[0].split('#')) > 1:
            file_revision = fields[0].split('#')[1]
        else:
            file_revision = None
        assert(fields[1] == '-')
        operation = fields[2]
        assert(operation in ['add','edit'])
        opened_files.append((operation,file_name,file_revision))
    return opened_files

def getShelvedFiles(changelist):
    shelved_files = []
    command = getP4Command() + ['describe','-S','-s',changelist]
    (out,_) = runCommand(command)
    for l in out.split('\n'):
        if not l.startswith('...'):
            continue
        space_split = l.split(' ')
        assert(space_split[0] == '...')
        file_name = ' '.join((space_split[1:])[:-1]).split('#')[0]
        file_revision = space_split[-2].split('#')[1]
        operation = space_split[-1]
        assert(operation in ['add','branch','move/delete','move/add','edit','delete','integrate'])
        shelved_files.append((operation,file_name,file_revision))
    return shelved_files
    
def main():
    p = argparse.ArgumentParser(description='Generate a diff from Perforce given the changelist number. If you wish to generate the diff from a shelved changelist, please specify the --shelved/-s option.',
                                prog='p4-diff')

    p.add_argument('--changelist','-c',metavar='CHANGELIST',help='Perforce changelist number, e.g. 123456',required=True)
    p.add_argument('--shelved','-s',action='store_true',help='Changelist is shelved')
    p.add_argument('--ticket','-t',metavar='P4TICKET',help='If required, use a P4TICKET to authenticate.')
    p.add_argument('--verbose','-v',action='store_true',help='Enable verbose output useful such as executing Perforce commands. Note, this will corrupt the diff output')

    options = p.parse_args()

    if not userHasPerforce():
        print 'error: could not find perforce executable.'
        exit(1)
    
    changelist = options.changelist

    global Verbose
    Verbose = options.verbose
    global Ticket
    Ticket = options.ticket
        
    if options.shelved:
        file_list = getShelvedFiles(changelist)
    else:
        file_list = getOpenedFiles(changelist)

    if not len(file_list):
        print 'No files to generate diff from.'
    else:
        for (op,f,file_revision) in file_list:
            local_f = convertDepotPathToLocal(f)
            if Verbose:
                print '{} was open for {} [{}]'.format(local_f,op,f)
            if op == 'add' or op == 'branch' or op == 'move/add':
                if options.shelved:
                    generateAddedFileDiffFromShelved(changelist,f)
                else:
                    generateFileDiff(True,local_f)
            elif op == 'edit' or op == 'integrate':
                if options.shelved:
                    generateEditFileDiffFromShelved(file_revision,changelist,f)
                else:
                    generateEditFileDiff(f)
            elif op == 'delete' or op == 'move/delete':
                if options.shelved:
                    generateDeletedFileDiffFromShelved(changelist,f,file_revision)
                else:
                    generateFileDiff(False,local_f)
            else:
                print ('Unhandled operation {}'.format(op))
                assert(False)

if __name__ == '__main__':
    main()
